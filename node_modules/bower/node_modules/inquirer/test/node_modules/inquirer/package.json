{
  "name": "inquirer",
  "version": "0.1.12",
  "description": "A collection of common interactive command line user interfaces.",
  "main": "lib/inquirer.js",
  "scripts": {
    "test": "grunt --verbose"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/Inquirer.js.git"
  },
  "keywords": [
    "command",
    "prompt",
    "stdin",
    "cli"
  ],
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "~1.2.1",
    "async": "~0.2.8",
    "cli-color": "~0.2.2",
    "mute-stream": "0.0.3"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.8",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "~1.9.0",
    "chai": "~1.6.0",
    "grunt-contrib-jshint": "~0.5.1",
    "sinon": "~1.7.2",
    "proxyquire": "~0.4.1",
    "grunt-release": "~0.3.3"
  },
  "readme": "Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array) Choices array.  \nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts\n---------------------\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] What about the toping: (Use arrow key)\n  [X] Peperonni and chesse\n  [ ] All dressed\n  [ ] Hawa√Øan\n```\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] You also get a free 2L liquor: \n  1) Pepsi\n  2) 7up\n  3) Coke\n  Answer: \n```\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties.\n\n``` prompt\n[?] Is it for a delivery: (Y/n)\n```\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n``` prompt\n[?] Any comments on your purchase experience: (Nope, all good!)\n```\n\n\nNews on the march (Release notes)\n=====================\n\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\n+ **0.1.6** : Fix bug on unix and minor enhancement\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\n+ **0.1.3** : Add async support for validation and filtering functions.\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/SBoudrias/Inquirer.js/issues"
  },
  "_id": "inquirer@0.1.12",
  "_from": "inquirer@~0.1"
}
